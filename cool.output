Nonterminals useless in grammar

   formal_list
   formal
   expr_list
   expr
   let_init
   cases
   case


Terminals unused in grammar

   ELSE
   FI
   IF
   IN
   LET
   LOOP
   POOL
   THEN
   WHILE
   CASE
   ESAC
   OF
   DARROW
   NEW
   ISVOID
   STR_CONST
   INT_CONST
   BOOL_CONST
   ASSIGN
   NOT
   LE
   ERROR
   '<'
   '='
   '+'
   '-'
   '*'
   '/'
   '~'
   '@'
   '.'
   '('
   ')'
   ','


Rules useless in grammar

    9 feature: OBJECTID '(' formal_list ')' ':' TYPEID '{' expr '}' ';'
   10        | OBJECTID ':' TYPEID ASSIGN expr ';'

   11 formal_list: /* empty */
   12            | formal
   13            | formal ',' formal_list

   14 formal: OBJECTID ':' TYPEID

   15 expr_list: expr
   16          | expr_list ',' expr
   17          | expr ';'
   18          | expr ';' expr_list

   19 expr: OBJECTID ASSIGN expr
   20     | expr '.' OBJECTID '(' expr_list ')'
   21     | expr '.' '@' TYPEID '.' OBJECTID '(' expr_list ')'
   22     | OBJECTID '(' expr_list ')'
   23     | IF expr THEN expr ELSE expr FI
   24     | WHILE expr LOOP expr POOL
   25     | '{' expr_list '}'
   26     | LET let_init
   27     | CASE expr OF cases ESAC

   28 let_init: OBJECTID ':' TYPEID IN expr
   29         | OBJECTID ':' TYPEID ASSIGN expr IN expr
   30         | OBJECTID ':' TYPEID ',' let_init
   31         | OBJECTID ':' TYPEID ASSIGN expr ',' let_init

   32 cases: case
   33      | cases case

   34 case: OBJECTID ':' TYPEID DARROW expr ';'


Grammar

    0 $accept: program $end

    1 program: class_list

    2 class_list: class
    3           | class_list class

    4 class: CLASS TYPEID '{' feature_list '}' ';'
    5      | CLASS TYPEID INHERITS TYPEID '{' feature_list '}' ';'

    6 feature_list: /* empty */
    7             | feature_list feature

    8 feature: OBJECTID ':' TYPEID ';'


Terminals, with rules where they appear

$end (0) 0
'(' (40)
')' (41)
'*' (42)
'+' (43)
',' (44)
'-' (45)
'.' (46)
'/' (47)
':' (58) 8
';' (59) 4 5 8
'<' (60)
'=' (61)
'@' (64)
'{' (123) 4 5
'}' (125) 4 5
'~' (126)
error (256)
CLASS (258) 4 5
ELSE (259)
FI (260)
IF (261)
IN (262)
INHERITS (263) 5
LET (264)
LOOP (265)
POOL (266)
THEN (267)
WHILE (268)
CASE (269)
ESAC (270)
OF (271)
DARROW (272)
NEW (273)
ISVOID (274)
STR_CONST (275)
INT_CONST (276)
BOOL_CONST (277)
TYPEID (278) 4 5 8
OBJECTID (279) 8
ASSIGN (280)
NOT (281)
LE (282)
ERROR (283)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
class_list (47)
    on left: 2 3, on right: 1 3
class (48)
    on left: 4 5, on right: 2 3
feature_list (49)
    on left: 6 7, on right: 4 5 7
feature (50)
    on left: 8, on right: 7


state 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program     go to state 2
    class_list  go to state 3
    class       go to state 4


state 1

    4 class: CLASS . TYPEID '{' feature_list '}' ';'
    5      | CLASS . TYPEID INHERITS TYPEID '{' feature_list '}' ';'

    TYPEID  shift, and go to state 5


state 2

    0 $accept: program . $end

    $end  shift, and go to state 6


state 3

    1 program: class_list .
    3 class_list: class_list . class

    CLASS  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class  go to state 7


state 4

    2 class_list: class .

    $default  reduce using rule 2 (class_list)


state 5

    4 class: CLASS TYPEID . '{' feature_list '}' ';'
    5      | CLASS TYPEID . INHERITS TYPEID '{' feature_list '}' ';'

    INHERITS  shift, and go to state 8
    '{'       shift, and go to state 9


state 6

    0 $accept: program $end .

    $default  accept


state 7

    3 class_list: class_list class .

    $default  reduce using rule 3 (class_list)


state 8

    5 class: CLASS TYPEID INHERITS . TYPEID '{' feature_list '}' ';'

    TYPEID  shift, and go to state 10


state 9

    4 class: CLASS TYPEID '{' . feature_list '}' ';'

    $default  reduce using rule 6 (feature_list)

    feature_list  go to state 11


state 10

    5 class: CLASS TYPEID INHERITS TYPEID . '{' feature_list '}' ';'

    '{'  shift, and go to state 12


state 11

    4 class: CLASS TYPEID '{' feature_list . '}' ';'
    7 feature_list: feature_list . feature

    OBJECTID  shift, and go to state 13
    '}'       shift, and go to state 14

    feature  go to state 15


state 12

    5 class: CLASS TYPEID INHERITS TYPEID '{' . feature_list '}' ';'

    $default  reduce using rule 6 (feature_list)

    feature_list  go to state 16


state 13

    8 feature: OBJECTID . ':' TYPEID ';'

    ':'  shift, and go to state 17


state 14

    4 class: CLASS TYPEID '{' feature_list '}' . ';'

    ';'  shift, and go to state 18


state 15

    7 feature_list: feature_list feature .

    $default  reduce using rule 7 (feature_list)


state 16

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list . '}' ';'
    7 feature_list: feature_list . feature

    OBJECTID  shift, and go to state 13
    '}'       shift, and go to state 19

    feature  go to state 15


state 17

    8 feature: OBJECTID ':' . TYPEID ';'

    TYPEID  shift, and go to state 20


state 18

    4 class: CLASS TYPEID '{' feature_list '}' ';' .

    $default  reduce using rule 4 (class)


state 19

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list '}' . ';'

    ';'  shift, and go to state 21


state 20

    8 feature: OBJECTID ':' TYPEID . ';'

    ';'  shift, and go to state 22


state 21

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list '}' ';' .

    $default  reduce using rule 5 (class)


state 22

    8 feature: OBJECTID ':' TYPEID ';' .

    $default  reduce using rule 8 (feature)
