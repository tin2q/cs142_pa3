Tran Tu
Trisdan Leyson

Write-up for PA3
----------------
I specify the grammar for Classes, Features, Cases, Expressions using 
the Cool Manual's syntax page. 
For the expressions, instead of having just one list of expressions, I
have to divide them into expression block separated by semicolons and 
expression list separated by commas.
The let statement is the most challenging. I use the Bison's feature
to have "IN" be right associative with the lowest precedence.
Therefore LET will be parse as
var : type, var2: type, var3: type IN (expr) 
The low precedence is to ensure that var : type is picked before
var : type IN.

I run mycoolc over the examples cool programs and my stack program from
assignment 1. They ensure that the parser works with good inputs. As
for testing the bad inputs. I test to make sure that the parser prints
out of some errors and recover when there is a class error, expressions
error, let assignment error, and features error. For bad.cl, the output
does not match exactly the output from coolc compiler due to how 
I gobble the input. However, the error detection is at the same
block of code.  I hope this is ok. 


